import CRC32 from 'crc-32';
import Hex from 'crypto-js/enc-hex';
import baseX from 'base-x';
import sha256 from 'crypto-js/sha256';

const BASE62 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
const base62 = baseX(BASE62);

/**
 * This function generates a short ID from the original URL,
 * hashing the ID using with SHA-256 and converting the first 7 bytes to Base62.
 * 
 * 
 *
 * The ID is generated by hashing the original URL using SHA-256,
 * this means that the same URL will always generate the same ID.
 * We're then converting the first 7 bytes of the hash to Base62,
 * this keep the ID short but now.
 *
 * Because we're reducing the hash to 7 bytes, there is a risk of collision,
 * however low, it's a risk.
 * 
 * To improve the uniqueness of the short ID, we could abstract this
 * logic into a separate service that keeps track of all the unique
 * ensuring consistency across the system.
 *
 * @param originalUrl
 * @returns {shortId} The short ID generated from the original URL
 */
export const generateShortIdWithSHA256 = (originalUrl: string): string => {
  // 1. Hash the URL using SHA-256
  const hash = sha256(originalUrl).toString(Hex);

  // 2. Convert first 7 bytes to Base62 (short & unique)
  const base62Id = base62.encode(Buffer.from(hash, 'hex').subarray(0, 5));

  return base62Id;
};

/**
 * This function generates a short ID from the original URL
 * using CRC32 to hash the URL and converting the hash to Base62.
 *
 * ✔ Fast & Deterministic – Same URL always generates the same short ID.
 * 
 * ✔ Short Output – CRC32 generates a 4-byte (32-bit) hash, keeping IDs short.
 * 
 * ✔ Base62 Encoding – Ensures a URL-safe and human-readable ID.
 * 
 * ✔ No External Calls – Works entirely in-memory without requiring a DB for uniqueness.
 * 
 * 
 * @param originalUrl
 * @returns {shortId} The short ID generated from the original URL
 */
export function generateShortIdWithCRC32(originalUrl: string): string {
  // Compute CRC32 hash (signed integer)
  const hashInt = CRC32.str(originalUrl);

  // Convert to unsigned integer (avoid negative values)
  const hashUint = hashInt >>> 0;

  // Encode in Base62
  const shortId = base62.encode(Buffer.from(hashUint.toString(16), 'hex'));

  return shortId;
}